{"version":3,"sources":["login.component.ts"],"names":[],"mappings":";;;;;;;;AACA,sCAA+E;AAC/E,wCAAwD;AAWxD;IAEI,wBACU,WAAwB,EACxB,MAAc;QADd,gBAAW,GAAX,WAAW,CAAa;QACxB,WAAM,GAAN,MAAM,CAAQ;IACvB,CAAC;IAYJ,iCAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAGA,iCAAQ,GAAR;QACC,IAAI,CAAC,IAAI,GAAG,IAAI,iBAAS,CAAC;YACxB,QAAQ,EAAE,IAAI,mBAAW,CAAC,EAAE,CAAC;YAC7B,QAAQ,EAAE,IAAI,mBAAW,CAAC,EAAE,CAAC;SAC9B,CAAC,CAAC;QACL,oDAAoD;QACpD,mBAAmB;QACnB,sBAAsB;IACtB,CAAC;IAED,+BAAM,GAAN;QAAA,iBA8BC;QA7BC,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACrB,OAAO;SACR;QACD,IAAI,CAAC,SAAS,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAE5F,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,CAC9C,UAAC,QAAa;YACZ,IAAI,QAAQ,EAAE;gBACZ,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;gBACrB,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC9D,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;gBACjE,IAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAC;oBACzB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;iBAC7C;qBAAK,IAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAC;oBAC/B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACnC;qBAAM,IAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAC;oBAChC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;iBACjC;aAEF;iBAAM;gBACL,KAAI,CAAC,KAAK,GAAG,8BAA8B,CAAC;gBAC5C,KAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;aAClD;QACH,CAAC,EACD,UAAC,KAAwB;YACvB,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;QACtB,CAAC,CACF,CAAA;IACH,CAAC;IAED,kCAAS,GAAT;QACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAlEU,cAAc;QAL1B,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,wBAAwB;YACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;SACrC,CAAC;OACW,cAAc,CA0E1B;IAAD,qBAAC;CA1ED,AA0EC,IAAA;AA1EY,wCAAc","file":"login.component.js","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Console } from 'console';\nimport { UserLogin } from 'src/app/models/user-login';\nimport { UserService } from '../../services/user.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n    constructor(\n      private userService: UserService,\n      private router: Router\n  ) {}\n\n  form!: FormGroup;\n  userLogin!: UserLogin;\n  user: any;\n\n\n  error: string | null | undefined;\n\n\n\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n\n   initForm() { // initialize the form to create a drawing\n    this.form = new FormGroup({\n      username: new FormControl(''),\n      password: new FormControl(''),\n    });\n  //  this.userLogin = { userName: \"\", password: \"\" };\n  //  this.user = {};\n  //  this.error = null;\n  }\n\n  submit() {\n    if (this.form.invalid) {\n      return;\n    }\n    this.userLogin = { userName: this.form.value.username, password: this.form.value.password };\n\n    this.userService.login(this.userLogin).subscribe(\n      (response: any) => {\n        if (response) {\n          console.log(response)\n          window.localStorage.setItem('name', this.form.value.username);\n          window.localStorage.setItem('accessToken', response.accesstoken);\n          if(response.user.role == 3){\n            this.router.navigate(['employee-demandes']);\n          }else if(response.user.role == 2){\n            this.router.navigate(['manager']);\n          } else if(response.user.role == 1){\n            this.router.navigate(['admin']);\n          }\n          \n        } else {\n          this.error = \"username or password invalid\";\n          this.initForm();\n          console.log(localStorage.getItem('accessToken'));\n        }\n      },\n      (error: HttpErrorResponse) => {\n        alert(error.message)\n      }\n    )\n  }\n\n  initError() {\n    this.error = null;\n  }\n\n  /*\n  reroute() {\n    if (this.authService.isLoggedIn()) { //Si l'utilisateur est déjà connecté, le renvoie sur l'accueil.\n      this.router.navigate(['accueil']);\n    }\n  } */\n}\n"]}