{"version":3,"sources":["role-guard.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAG3C,yCAAgC;AAOhC;IAKE,0BAAmB,IAAiB,EAAS,MAAc;QAAxC,SAAI,GAAJ,IAAI,CAAa;QAAS,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEhE,sCAAW,GAAX,UAAY,KAA6B;QACvC,4CAA4C;QAC5C,uBAAuB;QACvB,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChC,IAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAC;YACrB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;YAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAClC;QAED,IAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAClD,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,sCAAsC;YACxC,IAAI,CAAC,YAAY,GAAG,uBAAM,CAAC,KAAK,CAAC,CAAC;YAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;YAC9B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;YACnC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACjB,IAAG,IAAI,CAAC,KAAK,EAAC;gBACZ,IAAK,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;oBAC/E,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBAChC,OAAO,KAAK,CAAC;iBACd;qBAAM;oBACL,OAAO,IAAI,CAAC;iBACb;aACF;iBAAM;gBACL,IAAK,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,IAAI,EAAE;oBACnC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBAChC,OAAO,KAAK,CAAC;iBACd;qBAAM;oBACL,OAAO,IAAI,CAAC;iBACb;aACF;SACF;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IAEH,CAAC;IA1CU,gBAAgB;QAH5B,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,gBAAgB,CA2C5B;IAAD,uBAAC;CA3CD,AA2CC,IAAA;AA3CY,4CAAgB","file":"role-guard.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport decode from 'jwt-decode';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuardService implements CanActivate {\n\n  tokenPayload: any;\n  role2: any;\n\n  constructor(public auth: AuthService, public router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    // this will be passed from the route config\n    // on the data property\n    const role = route.data['role'];\n    if(route.data['role2']){\n      console.log(route.data['role2'])\n      this.role2 = route.data['role2'];\n    }\n    \n    const token = localStorage.getItem('accessToken');\n    if (token != null) {\n        // decode the token to get its payload\n      this.tokenPayload = decode(token);\n      console.log(this.tokenPayload)\n      console.log(this.tokenPayload.role)\n      console.log(role)\n      if(this.role2){\n        if ( (this.tokenPayload.role != role) && (this.tokenPayload.role != this.role2)) {\n          this.router.navigate(['login']);\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        if ( this.tokenPayload.role != role) {\n          this.router.navigate(['login']);\n          return false;\n        } else {\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n\n  }\n}\n"]}