{"version":3,"sources":["role-guard.service.ts"],"names":["core_1","require","jwt_decode_1","RoleGuardService","auth","router","this","prototype","canActivate","route","role","data","console","log","role2","token","localStorage","getItem","tokenPayload","navigate","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAGAC,aAAAD,QAAA,cAOAE,iBAAA,WAKE,SAAAA,EAAmBC,EAA0BC,GAA1BC,KAAAF,KAAAA,EAA0BE,KAAAD,OAAAA,EAsC/C,OApCEF,EAAAI,UAAAC,YAAA,SAAYC,GAGV,IAAMC,EAAOD,EAAME,KAAW,KAC3BF,EAAME,KAAY,QACnBC,QAAQC,IAAIJ,EAAME,KAAY,OAC9BL,KAAKQ,MAAQL,EAAME,KAAY,OAGjC,IAAMI,EAAQC,aAAaC,QAAQ,eACnC,OAAa,MAATF,IAEFT,KAAKY,aAAehB,aAAA,QAAOa,GAC3BH,QAAQC,IAAIP,KAAKY,cACjBN,QAAQC,IAAIP,KAAKY,aAAaR,MAC9BE,QAAQC,IAAIH,GACTJ,KAAKQ,MACAR,KAAKY,aAAaR,MAAQA,GAAUJ,KAAKY,aAAaR,MAAQJ,KAAKQ,QACvER,KAAKD,OAAOc,SAAS,CAAC,WACf,GAKJb,KAAKY,aAAaR,MAAQA,IAC7BJ,KAAKD,OAAOc,SAAS,CAAC,WACf,KAjCJhB,EAAgBiB,WAAA,CAH5BpB,OAAAqB,WAAW,CACVC,WAAY,UAEDnB,GAAb,GAAaoB,QAAApB,iBAAAA","file":"role-guard.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport decode from 'jwt-decode';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleGuardService implements CanActivate {\n\n  tokenPayload: any;\n  role2: any;\n\n  constructor(public auth: AuthService, public router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    // this will be passed from the route config\n    // on the data property\n    const role = route.data['role'];\n    if(route.data['role2']){\n      console.log(route.data['role2'])\n      this.role2 = route.data['role2'];\n    }\n    \n    const token = localStorage.getItem('accessToken');\n    if (token != null) {\n        // decode the token to get its payload\n      this.tokenPayload = decode(token);\n      console.log(this.tokenPayload)\n      console.log(this.tokenPayload.role)\n      console.log(role)\n      if(this.role2){\n        if ( (this.tokenPayload.role != role) && (this.tokenPayload.role != this.role2)) {\n          this.router.navigate(['login']);\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        if ( this.tokenPayload.role != role) {\n          this.router.navigate(['login']);\n          return false;\n        } else {\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n\n  }\n}\n"]}